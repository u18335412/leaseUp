generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id              String              @id @default(uuid())
  name            String
  street          String
  city            String
  province        String
  zip             String
  country         String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
  description     PropertyDescription @default(MULTIFAMILY)
  type            PropertyType        @default(RESIDENTIAL)
  Unit            Unit[]
  PropertyOwner   User                @relation(fields: [propertyOwnerId], references: [id])
  propertyOwnerId String
}

model Unit {
  id                String   @id @default(uuid())
  name              String
  propertyId        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  tenantId          String?
  numberOfBedrooms  Int
  numberOfBathrooms Int
  furnished         Boolean  @default(false)
  occupied          Boolean  @default(false)
  petsAllowed       Boolean  @default(false)
  smokingAllowed    Boolean  @default(false)
  marketRent        Float
  property          Property @relation(fields: [propertyId], references: [id])
  leaseId           String?
}

model PropertyOwner {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PropertyOwnerInvitation {
  id        String   @id @default(uuid())
  email     String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Tenant {
  id          String        @id @default(uuid())
  firstName   String
  lastName    String
  email       String
  phone       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  LeaseTenant LeaseTenant[]
}

model LeaseTenant {
  id        String   @id @default(uuid())
  tenantId  String
  leaseId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Lease     Lease    @relation(fields: [leaseId], references: [id])
  Tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model Lease {
  id          String        @id @default(uuid())
  unitId      String        @unique
  tenantId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  LeaseTenant LeaseTenant[]
}

model User {
  id        String     @id
  type      Role       @default(OWNER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  Property  Property[]
  tenantId  String?
}

model Files {
  id          String   @id @default(uuid())
  name        String
  description String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

enum Role {
  PROSPECT
  TENANT
  OWNER
}

enum UnitStatus {
  OCCUPIED
  VACANT
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
}

enum PropertyDescription {
  SINGLEFAMILY
  MULTIFAMILY
  APARTMENT
  HOUSE
  TOWNHOUSE
  OTHER
}

enum LeaseType {
  FIXED
  MONTH_TO_MONTH
}
